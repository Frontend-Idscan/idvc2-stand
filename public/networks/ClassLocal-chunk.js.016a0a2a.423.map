{"version":3,"file":"ClassLocal-chunk.js","mappings":"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","sources":["webpack://@idscan/idvc2/./src/neural models/classLocalModel.ts","webpack://@idscan/idvc2/./src/loader/loaderClassLocal.ts"],"sourcesContent":["import { Tensor } from 'onnxruntime-web';\r\nimport NeuralModel from './neuralModel';\r\nimport { Provider } from './Provider';\r\nimport { RGBColor32 } from '../helpers/image';\r\nimport { createCanvas, resize } from '../helpers/canvas';\r\nimport { Normalization, rgbaToRgb } from '../helpers/color';\r\nimport { ClassLocalExitType, exits } from './classLocal/exits';\r\nimport { Bbox } from '../types/geometry';\r\nimport { IOffset, ISize } from '../helpers/ts/common';\r\n\r\n/**\r\n * perimeterInPercents: document perimeter in percents\r\n */\r\nexport interface InterpretClassLocalRes {\r\n  side: ClassLocalExitType,\r\n  bbox: Bbox,\r\n  perimeterInPercents: ISize,\r\n}\r\ninterface Prediction {\r\n  label: ClassLocalExitType,\r\n  score: number,\r\n}\r\n\r\nexport type PredictionList = Prediction[];\r\n\r\nconst BATCH = 1 as const;\r\nconst WIDTH = 320 as const;\r\nconst HEIGHT = 320 as const;\r\nconst COLOR_COUNT = 3 as const;\r\nconst INPUT_TENSOR_DIMS = [BATCH, HEIGHT, WIDTH, COLOR_COUNT] as const;\r\n// const OUTPUT_TENSOR = [1, 8] as const;\r\nconst INPUT_TENSOR_NAME = 'serving_default_input_2:0' as const;\r\nconst OUTPUT_TENSOR_NAME_BBOX = 'StatefulPartitionedCall:0' as const;\r\nconst OUTPUT_TENSOR_NAME_CLASSIFIER = 'StatefulPartitionedCall:1' as const;\r\n\r\nexport class ClassLocalModel extends NeuralModel {\r\n  private canvasSize: ISize = {\r\n    width: 1,\r\n    height: 1,\r\n  };\r\n\r\n  constructor(\r\n    url = '',\r\n    provider: Provider = Provider.WASM,\r\n    wasmPaths = '',\r\n  ) {\r\n    super(url, provider, wasmPaths);\r\n  }\r\n\r\n  setSizes({ height, width }: ISize) {\r\n    this.canvasSize.width = width;\r\n    this.canvasSize.height = height;\r\n  }\r\n\r\n  predict(\r\n    rgb: RGBColor32,\r\n  ) {\r\n    const inputTensor = new Tensor('float32', rgb, INPUT_TENSOR_DIMS);\r\n    const feeds = { [INPUT_TENSOR_NAME]: inputTensor };\r\n    return this.session.run(feeds);\r\n  }\r\n\r\n  async predictFromImage(\r\n    input: HTMLCanvasElement | HTMLImageElement | ImageData,\r\n    dstCanvas?: HTMLCanvasElement,\r\n    offsets?: IOffset,\r\n    cropSizes?: ISize,\r\n  ) {\r\n    if (this.loading) { return []; }\r\n    const src = this.createSrc(input, 'angles-input-canvas');\r\n    const dst = dstCanvas || createCanvas('angles-canvas', { width: WIDTH, height: HEIGHT });\r\n    const resized = resize(src, dst, offsets, cropSizes);\r\n    const buf = rgbaToRgb(resized, Normalization.WITHOUT);\r\n    const predicted = await this.predict(buf);\r\n\r\n    this.setSizes(src);\r\n    return this.interpret(\r\n      predicted[OUTPUT_TENSOR_NAME_CLASSIFIER].data as Float32Array,\r\n      predicted[OUTPUT_TENSOR_NAME_BBOX].data as Float32Array,\r\n    );\r\n  }\r\n\r\n  interpret(\r\n    classifierData: Float32Array,\r\n    bboxData: Float32Array,\r\n  ) {\r\n    const res: InterpretClassLocalRes = {\r\n      side: 'None',\r\n      bbox: {\r\n        topLeft: { x: 0, y: 0 },\r\n        bottomRight: { x: 1, y: 1 },\r\n      },\r\n      perimeterInPercents: {\r\n        width: 0,\r\n        height: 0,\r\n      },\r\n    };\r\n    const predictionList: PredictionList = [];\r\n    classifierData.forEach((val, idx) => predictionList.push({\r\n      label: exits[idx],\r\n      score: val,\r\n    }));\r\n\r\n    res.side = predictionList\r\n      .sort((a, b) => b.score - a.score)[0].label;\r\n\r\n    res.bbox.topLeft.x = ~~(bboxData[0] * this.canvasSize.width);\r\n    res.bbox.topLeft.y = ~~(bboxData[1] * this.canvasSize.height);\r\n    res.bbox.bottomRight.x = ~~(bboxData[2] * this.canvasSize.width);\r\n    res.bbox.bottomRight.y = ~~(bboxData[3] * this.canvasSize.height);\r\n\r\n    res.perimeterInPercents.width = ~~((bboxData[2] - bboxData[0]) * 100);\r\n    res.perimeterInPercents.height = ~~((bboxData[3] - bboxData[1]) * 100);\r\n\r\n    return res;\r\n  }\r\n}\r\n","import c from '../context';\r\nimport networkNames from '../environment/networkNames.json';\r\nimport moduleController from '../controllers/ModuleController';\r\nimport { ClassLocalModel } from '../neural models/classLocalModel';\r\nimport { Provider } from '../neural models/Provider';\r\nimport { NeuralModelInitializer } from '../neural models/neuralModel';\r\n\r\nexport default async (): Promise<Array<NeuralModelInitializer>> => {\r\n  const classLocalModel = new ClassLocalModel(`${networkNames.neurons.classLocalModel}`, Provider.WASM, c.networkUrl);\r\n  moduleController.setModule('model', 'classLocal', classLocalModel);\r\n\r\n  return [classLocalModel.initialize.bind(classLocalModel)];\r\n};\r\n"],"names":["Tensor","NeuralModel","Provider","createCanvas","resize","Normalization","rgbaToRgb","exits","BATCH","WIDTH","HEIGHT","COLOR_COUNT","INPUT_TENSOR_DIMS","INPUT_TENSOR_NAME","OUTPUT_TENSOR_NAME_BBOX","OUTPUT_TENSOR_NAME_CLASSIFIER","ClassLocalModel","url","provider","WASM","wasmPaths","canvasSize","width","height","setSizes","predict","rgb","inputTensor","feeds","session","run","predictFromImage","input","dstCanvas","offsets","cropSizes","src","dst","resized","buf","predicted","loading","createSrc","WITHOUT","interpret","data","classifierData","bboxData","res","side","bbox","topLeft","x","y","bottomRight","perimeterInPercents","predictionList","forEach","val","idx","push","label","score","sort","a","b","c","networkNames","moduleController","classLocalModel","neurons","networkUrl","setModule","initialize","bind"],"sourceRoot":""}