{"version":3,"file":"Bubble-chunk.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,OAAO;AAEb,IAAMC,0BAA0B,SAACC;QAAmBC,4EAAW,CAAC;IAC9D,IAAMC,UAAU;QACdC,gBAAgB;QAChBC,SAAS;OAENH;IAGL,IAAI,CAACD,kBAAkBK,SAAS,UAAUL,kBAAkBK,SAASC,OAAOC,SAASC,SAAS;QAC5F,yCAAyC;QACzC,OAAOC,QAAQC,QAAQV;IACzB;IACA,sDAAsD;IACtD,OAAO,IAAIS,QAAQ,SAACC,SAASC;eAAWC,MAAMZ,mBAC3Ca,KAAK,SAACC;mBAAQA,IAAIC;WAClBF,KAAK,SAACG;YACL,IAAMC,aAAa,IAAIC,IAAIlB,mBAAmBmB,KAAKC,MAAM;YACzDH,WAAWI;YAEX,IAAMC,mBAAmB,qFACyC,OAA3B,GAAwB,OAArBL,WAAWM,KAAK,MAAK,MAAG;YAGlE,IAAIC,WAAW,QAAgBC,OAAR3B,MAAK,KAAqD,OAAlD2B,mBAAmBH,mBAAmBN;YAErE,IAAId,QAAQE,SAAS;gBACnBoB,WAAWN,IAAIQ,gBACb,IAAIC,KAAK;oBAAE,kBAA0B,OAATH,UAAS;iBAAI,EAAE;oBAAE1B,MAAAA;gBAAK;YAEtD;YACAY,QAAQc;QACV,GACCI,MAAMjB;;AACX;AAEO,IAAMkB;eAAa,6BAAOC;YACzBC;;;;oBAAY;;wBAAMhC,wBAAwB+B;;;oBAA1CC,YAAY;oBAClB;;wBAAO,IAAIC,OAAOD;;;;IACpB;oBAHaF,WAAoBC;;;IAG/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtCK;;aAAMG,aAECC,MAAc;gCAFfD;QACXC,uBAAAA,UAAAA,KAAAA;QAEE,IAAI,CAACA,SAASA;;kBAHLD;;YAMXE,KAAAA;mBAAAA,SAAAA,QAAQC,IAAyB;;gBAC/B,OAAO,IAAI3B,QAAQ,SAACC;oBAClB,MAAKwB,OAAOG,YAAYD;oBACxB,MAAKF,OAAOI,YAAY;4BAAGF,iBAAAA,KAAQG;wBACjC7B,QAAQ6B;oBACV;gBACF;YACF;;;WAbWN;IAcZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChB8D;AACR;AACP;AACrB;AAE3B,gEAAe;QACPC,QACAQ;;;;gBADS;;oBAAMb,6BAAUA,CAAC,GAAqB,OAAlBY,sDAAiBE,EAAC;;;gBAA/CT,SAAS;gBACTQ,eAAe,IAAIT,YAAYA,CAACC;gBACtCM,mDAA0BI,CAAC,UAAU,UAAUF;;;;;;AACjD,IAAE","sources":["webpack://@idscan/idvc2/./src/helpers/workers.ts","webpack://@idscan/idvc2/./src/modules/bubbleModule.ts","webpack://@idscan/idvc2/./src/loader/loaderBubble.ts"],"sourcesContent":["const type = 'application/javascript';\r\n\r\nconst getCrossOriginWorkerURL = (originalWorkerUrl, _options = {}) => {\r\n  const options = {\r\n    skipSameOrigin: true,\r\n    useBlob: true,\r\n\r\n    ..._options,\r\n  };\r\n\r\n  if (!originalWorkerUrl.includes('://') || originalWorkerUrl.includes(window.location.origin)) {\r\n    // The same origin - Worker will run fine\r\n    return Promise.resolve(originalWorkerUrl);\r\n  }\r\n  // eslint-disable-next-line no-promise-executor-return\r\n  return new Promise((resolve, reject) => fetch(originalWorkerUrl)\r\n    .then((res) => res.text())\r\n    .then((codeString) => {\r\n      const workerPath = new URL(originalWorkerUrl).href.split('/');\r\n      workerPath.pop();\r\n\r\n      const importScriptsFix = `const _importScripts = importScripts;\r\nconst _fixImports = (url) => new URL(url, '${`${workerPath.join('/')}/`}').href;\r\nimportScripts = (...urls) => _importScripts(...urls.map(_fixImports));`;\r\n\r\n      let finalURL = `data:${type},${encodeURIComponent(importScriptsFix + codeString)}`;\r\n\r\n      if (options.useBlob) {\r\n        finalURL = URL.createObjectURL(\r\n          new Blob([`importScripts(\"${finalURL}\")`], { type }),\r\n        );\r\n      }\r\n      resolve(finalURL);\r\n    })\r\n    .catch(reject));\r\n};\r\n\r\nexport const loadWorker = async (workerUrl) => {\r\n  const workerURL = await getCrossOriginWorkerURL(workerUrl);\r\n  return new Worker(workerURL);\r\n};\r\n","import { BubbleWorkerMessage } from '../types/workers/BubbleWorkerMessage';\r\n\r\nexport class BubbleModule {\r\n  worker: Worker;\r\n  constructor(worker: Worker) {\r\n    this.worker = worker;\r\n  }\r\n\r\n  process(data: BubbleWorkerMessage) {\r\n    return new Promise((resolve) => {\r\n      this.worker.postMessage(data);\r\n      this.worker.onmessage = ({ data: { segments } }) => {\r\n        resolve(segments);\r\n      };\r\n    });\r\n  }\r\n}\r\n","import moduleController from '../controllers/ModuleController';\r\nimport { BubbleModule } from '../modules/bubbleModule';\r\nimport { loadWorker } from '../helpers/workers';\r\nimport c from '../context';\r\n\r\nexport default async () => {\r\n  const worker = await loadWorker(`${c.chunkPublicPath}bubbleWorker.js`);\r\n  const bubbleModule = new BubbleModule(worker);\r\n  moduleController.setModule('module', 'bubble', bubbleModule);\r\n};\r\n"],"names":["type","getCrossOriginWorkerURL","originalWorkerUrl","_options","options","skipSameOrigin","useBlob","includes","window","location","origin","Promise","resolve","reject","fetch","then","res","text","codeString","workerPath","URL","href","split","pop","importScriptsFix","join","finalURL","encodeURIComponent","createObjectURL","Blob","catch","loadWorker","workerUrl","workerURL","Worker","BubbleModule","worker","process","data","postMessage","onmessage","segments","moduleController","c","bubbleModule","chunkPublicPath","setModule"],"sourceRoot":""}