{"version":3,"file":"MRZ-chunk.js","mappings":"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","sources":["webpack://@idscan/idvc2/./src/helpers/workers.ts","webpack://@idscan/idvc2/./src/neural models/mrz/exits.js","webpack://@idscan/idvc2/./src/neural models/mrzModel.ts","webpack://@idscan/idvc2/./src/modules/MrzModule.ts","webpack://@idscan/idvc2/./src/loader/loaderMRZ.ts"],"sourcesContent":["const type = 'application/javascript';\r\n\r\nconst getCrossOriginWorkerURL = (originalWorkerUrl, _options = {}) => {\r\n  const options = {\r\n    skipSameOrigin: true,\r\n    useBlob: true,\r\n\r\n    ..._options,\r\n  };\r\n\r\n  if (!originalWorkerUrl.includes('://') || originalWorkerUrl.includes(window.location.origin)) {\r\n    // The same origin - Worker will run fine\r\n    return Promise.resolve(originalWorkerUrl);\r\n  }\r\n  // eslint-disable-next-line no-promise-executor-return\r\n  return new Promise((resolve, reject) => fetch(originalWorkerUrl)\r\n    .then((res) => res.text())\r\n    .then((codeString) => {\r\n      const workerPath = new URL(originalWorkerUrl).href.split('/');\r\n      workerPath.pop();\r\n\r\n      const importScriptsFix = `const _importScripts = importScripts;\r\nconst _fixImports = (url) => new URL(url, '${`${workerPath.join('/')}/`}').href;\r\nimportScripts = (...urls) => _importScripts(...urls.map(_fixImports));`;\r\n\r\n      let finalURL = `data:${type},${encodeURIComponent(importScriptsFix + codeString)}`;\r\n\r\n      if (options.useBlob) {\r\n        finalURL = URL.createObjectURL(\r\n          new Blob([`importScripts(\"${finalURL}\")`], { type }),\r\n        );\r\n      }\r\n      resolve(finalURL);\r\n    })\r\n    .catch(reject));\r\n};\r\n\r\nexport const loadWorker = async (workerUrl) => {\r\n  const workerURL = await getCrossOriginWorkerURL(workerUrl);\r\n  return new Worker(workerURL);\r\n};\r\n","export const exits = [\r\n  '0',\r\n  '1',\r\n  '2',\r\n  '3',\r\n  '4',\r\n  '*',\r\n  '5',\r\n  '6',\r\n  '7',\r\n  '*',\r\n  '8',\r\n  '9',\r\n  'A',\r\n  '*',\r\n  'B',\r\n  'C',\r\n  '*',\r\n  'D',\r\n  '*',\r\n  'E',\r\n  '*',\r\n  'F',\r\n  '*',\r\n  'G',\r\n  '*',\r\n  'H',\r\n  'I',\r\n  'J',\r\n  '*',\r\n  'K',\r\n  '*',\r\n  'L',\r\n  '*',\r\n  'M',\r\n  'N',\r\n  'O',\r\n  'P',\r\n  '*',\r\n  'Q',\r\n  'R',\r\n  '*',\r\n  'S',\r\n  'T',\r\n  '*',\r\n  'U',\r\n  '*',\r\n  'V',\r\n  '*',\r\n  'W',\r\n  'X',\r\n  'Y',\r\n  '*',\r\n  'Z',\r\n  '<',\r\n  '*',\r\n];\r\n\r\nexport default exits;\r\n","import { Tensor, InferenceSession } from 'onnxruntime-web';\r\nimport NeuralModel from './neuralModel';\r\nimport { Provider } from './Provider';\r\nimport { RGBColor32 } from '../helpers/image';\r\nimport { Normalization, normalize } from '../helpers/color';\r\nimport { exits } from './mrz/exits';\r\n\r\ninterface Prediction {\r\n  value: string,\r\n  confidence: number,\r\n}\r\n\r\nexport type PredictionList = Prediction[];\r\n\r\nconst ONE_LETTER_SIZE = 784 as const;\r\nconst HEIGHT = 28 as const;\r\nconst WIDTH = 28 as const;\r\nconst COLOR_COUNT = 1 as const;\r\nconst INPUT_TENSOR_DIMS = [1, HEIGHT, WIDTH, COLOR_COUNT] as const;\r\nconst INPUT_TENSOR_NAME = 'input_1' as const;\r\nconst OUTPUT_TENSOR_NAME = 'dense' as const;\r\n\r\nexport default class MrzModel extends NeuralModel {\r\n  promiseList: Promise<InferenceSession.OnnxValueMapType>[];\r\n  predictionList: PredictionList[];\r\n\r\n  constructor(\r\n    url = '',\r\n    provider: Provider = Provider.WASM,\r\n    wasmPaths = '',\r\n  ) {\r\n    super(url, provider, wasmPaths);\r\n  }\r\n\r\n  predict(\r\n    rgb: RGBColor32,\r\n  ) {\r\n    const inputTensor = new Tensor('float32', rgb, INPUT_TENSOR_DIMS);\r\n    const feeds = { [INPUT_TENSOR_NAME]: inputTensor };\r\n    return this.session.run(feeds);\r\n  }\r\n\r\n  async predictFromArray(\r\n    input: Float32Array,\r\n    batchSize: number,\r\n  ) {\r\n    if (!this.promiseList) { this.promiseList = new Array(batchSize).fill(0); }\r\n    if (!this.predictionList) { this.predictionList = new Array(batchSize).fill(0); }\r\n\r\n    if (this.loading) { return []; }\r\n    const buf = normalize(input, Normalization.STANDART);\r\n\r\n    for (let i = 0; i < batchSize; i += 1) {\r\n      this.promiseList[i] = this.predict(buf.subarray(\r\n        ONE_LETTER_SIZE * i,\r\n        ONE_LETTER_SIZE * (i + 1),\r\n      ));\r\n    }\r\n    (\r\n      await Promise.all(this.promiseList)\r\n    ).forEach((prediction, i) => {\r\n      this.predictionList[i] = this.interpret(prediction[OUTPUT_TENSOR_NAME].data as Float32Array);\r\n    });\r\n\r\n    return this.predictionList;\r\n  }\r\n\r\n  interpret(\r\n    data: Float32Array,\r\n  ): PredictionList {\r\n    return Array.from(data)\r\n      .map((val, idx) => ({\r\n        value: exits[idx],\r\n        confidence: val,\r\n      }))\r\n      .sort((a, b) => a.confidence - b.confidence)\r\n      .slice(-3)\r\n      .reverse();\r\n  }\r\n\r\n  get isLoading() {\r\n    return this.loading;\r\n  }\r\n\r\n  predictFromImage(input, dstCanvas): void {}\r\n}\r\n","import { IMRZLocation } from './manualUploadProcessing';\r\nimport { IMrzScanRes } from '../types/mrz';\r\nimport { IMrzCoords } from '../loop';\r\nimport { StepFunctionResult } from '../types/loop';\r\nimport MrzModel, { PredictionList } from '../neural models/mrzModel';\r\nimport { Provider } from '../neural models/Provider';\r\nimport networkNames from '../environment/networkNames.json';\r\nimport c from '../context';\r\n\r\ninterface IMrzStepResult extends StepFunctionResult {\r\n  coords?: IMrzCoords,\r\n  needToCut?: boolean,\r\n  results?: {\r\n    mrzText: string,\r\n  },\r\n}\r\n\r\ninterface ILicenceError {\r\n  errorType: string;\r\n  error: boolean;\r\n  errorVal: string;\r\n}\r\n\r\ninterface IDetectRes {\r\n  status: boolean,\r\n  results?: { mrzText: string; } | null,\r\n  locations?: IMRZLocation,\r\n  error?: ILicenceError,\r\n  isNotMRZ: boolean,\r\n}\r\n\r\n/* eslint-disable no-underscore-dangle */\r\nexport class MrzModule {\r\n  w = 0;\r\n  h = 0;\r\n  successCount = 0;\r\n  worker: Worker;\r\n  model: MrzModel;\r\n  isInitialized = false;\r\n  isProcessing = false;\r\n  MIN_MRZ_FRAMES = 3;\r\n\r\n  constructor(worker: any, key: string, networkUrl: string) {\r\n    this.model = new MrzModel(`${networkNames.neurons.mrz}`, Provider.WASM, networkUrl);\r\n    this.worker = worker;\r\n    this.worker.postMessage({\r\n      fn: 'init',\r\n      initData: {\r\n        key,\r\n        networkUrl,\r\n      },\r\n    });\r\n    this.worker.onmessage = ({ data: { name, data } }) => {\r\n      if (name === 'initialization') {\r\n        this.isInitialized = data;\r\n      }\r\n    };\r\n  }\r\n\r\n  getErrorVal(errorId: number) {\r\n    let errorVal;\r\n    if (errorId === -3) {\r\n      errorVal = 0; // 'License Key has expired'\r\n    }\r\n    if (errorId === -2) {\r\n      errorVal = 1; // 'Invalid License Key'\r\n    }\r\n    return errorVal;\r\n  }\r\n\r\n  /**\r\n   * returns error Object\r\n   * @return {ILicenceError}\r\n   */\r\n  licenseError(errorId: number): ILicenceError {\r\n    return {\r\n      error: true,\r\n      errorType: 'licenceKeyError',\r\n      errorVal: this.getErrorVal(errorId),\r\n    };\r\n  }\r\n\r\n  yComparator(point1, point2) {\r\n    return point1.y < point2.y\r\n      ? [point1, point2]\r\n      : [point2, point1];\r\n  }\r\n\r\n  allocate() {\r\n    /* none */\r\n  }\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  prepareMRZlocation(locations): IMRZLocation {\r\n    const {\r\n      leftTop, rightTop, rightBottom, leftBottom,\r\n    } = locations;\r\n    const points = [leftTop, rightTop, rightBottom, leftBottom]\r\n      .sort((a, b) => a.x - b.x);\r\n    const [tl, bl] = this.yComparator(points[0], points[1]);\r\n    const [tr, br] = this.yComparator(points[2], points[3]);\r\n    const factor = 0.03;\r\n    return {\r\n      leftTop: {\r\n        x: tl.x - factor,\r\n        y: tl.y - factor,\r\n      },\r\n      rightTop: {\r\n        x: tr.x + factor,\r\n        y: tr.y - factor,\r\n      },\r\n      rightBottom: {\r\n        x: br.x + factor,\r\n        y: br.y + factor,\r\n      },\r\n      leftBottom: {\r\n        x: bl.x - factor,\r\n        y: bl.y + factor,\r\n      },\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  writeResults(mrzResults: IMrzScanRes): { mrzText: string } {\r\n    const res = {\r\n      mrzText: '',\r\n    };\r\n    const lines = mrzResults.fields\r\n      .filter((field) => (field.name.indexOf('Line') !== -1 && field.value.length > 0))\r\n      .map((field) => field.value)\r\n      .join('\\n');\r\n    if (lines.length > 0) {\r\n      res.mrzText = window.btoa(lines);\r\n    }\r\n    return res;\r\n  }\r\n\r\n  async predict(batchArr: Float32Array, batchSize): Promise<PredictionList[]> {\r\n    let result = await this.model.predictFromArray(batchArr, batchSize);\r\n    if (result.filter(([{ value }]) => value === '*').length > 3) {\r\n      result = await this.model.predictFromArray(batchArr.reverse(), batchSize);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  scan(iData: ImageData): Promise<IMrzScanRes> {\r\n    return new Promise((resolve) => {\r\n      this.worker.postMessage({\r\n        fn: 'prepare',\r\n        iData,\r\n      });\r\n      this.worker.onmessage = async ({ data: { name, data } }) => {\r\n        if (name === 'batchArr') {\r\n          const predictions = await this.predict(data.batchArr, data.batchSize);\r\n          this.worker.postMessage({\r\n            fn: 'process',\r\n            predictions,\r\n          });\r\n          return;\r\n        }\r\n        if (name === 'result') {\r\n          resolve(data);\r\n        }\r\n        resolve(data);\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * process frame for MRZ\r\n   * @param data\r\n   */\r\n  async processMRZ(data) {\r\n    const res: IMrzStepResult = {\r\n      status: false,\r\n      cancel: false,\r\n      touch: false,\r\n      image: null,\r\n      type: 'mrz',\r\n      isSuccessProcess: false,\r\n    };\r\n    if (this.isProcessing) { return res; }\r\n    if (!this.isInitialized) { return res; }\r\n    this.isProcessing = true;\r\n    const r = await this.scan(data);\r\n    if (r?.errorId) {\r\n      this.isProcessing = false;\r\n      return { ...r, error: this.licenseError(r.errorId) };\r\n    }\r\n    if (r && r?.status?.value === 0 && r?.count > 0) {\r\n      const rating = this.estimateResults(r);\r\n      const color = (rating === r.count && r.symbolsConf > 0.95) ? 'green' : 'yellow';\r\n      res.coords = {\r\n        locations: this.prepareMRZlocation(r.location),\r\n        color,\r\n      };\r\n      const isTrusted = rating === r.count && r.symbolsConf > 0.85;\r\n      const isValidRating = (rating >= (r.count - 2));\r\n      if (isTrusted || isValidRating) {\r\n        this.successCount += 1;\r\n        res.isSuccessProcess = true;\r\n        if (this.successCount >= this.MIN_MRZ_FRAMES) {\r\n          res.status = true;\r\n          res.needToCut = true;\r\n          res.image = data;\r\n          res.results = this.writeResults(r);\r\n        }\r\n      }\r\n    } else {\r\n      res.coords = null;\r\n      this.successCount = 0;\r\n    }\r\n    this.isProcessing = false;\r\n    return res;\r\n  }\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  estimateResults(data): number {\r\n    return (data.count === 0)\r\n      ? 0\r\n      : data.fields.reduce((sum, { status }) => (status === 'Valid' ? sum + 1 : sum), 0);\r\n  }\r\n\r\n  /**\r\n   * detects MRZ on ImageData\r\n   * @param {ImageData} imageData\r\n   * @return {Promise<>}\r\n   */\r\n  async detectMrz(imageData: ImageData): Promise<IDetectRes> {\r\n    const mrzResults = await this.scan(imageData);\r\n    const res1 = {};\r\n    // eslint-disable-next-line guard-for-in,no-restricted-syntax\r\n    for (const prop in mrzResults) {\r\n      res1[prop] = mrzResults[prop];\r\n    }\r\n    console.log('res1', res1);\r\n    console.log('c.mrzInfo', c.mrzInfo);\r\n    c.mrzInfo.detectMRZ.push(JSON.parse(JSON.stringify(res1)));\r\n    let isNotMRZ = true;\r\n\r\n    if (mrzResults && mrzResults.count > 0 && mrzResults.symbolsConf > 0.80) {\r\n      const locations = this.prepareMRZlocation(mrzResults.location);\r\n      const results = this.writeResults(mrzResults);\r\n      isNotMRZ = false;\r\n      return {\r\n        status: true,\r\n        locations,\r\n        results,\r\n        isNotMRZ,\r\n      };\r\n    }\r\n    if (mrzResults && mrzResults.symbolsConf > 0.6) {\r\n      isNotMRZ = false;\r\n    }\r\n    const res: IDetectRes = { status: false, isNotMRZ };\r\n    if (mrzResults?.errorId) {\r\n      res.error = this.licenseError(mrzResults.errorId);\r\n    }\r\n    const res2 = {};\r\n    // eslint-disable-next-line guard-for-in,no-restricted-syntax\r\n    for (const prop in res) {\r\n      res2[prop] = res[prop];\r\n    }\r\n    c.mrzInfo.detectRes.push(JSON.parse(JSON.stringify(res2)));\r\n    return res;\r\n  }\r\n}\r\n\r\nexport default MrzModule;\r\n","import c from '../context';\r\nimport moduleController from '../controllers/ModuleController';\r\nimport MRZModule from '../modules/MrzModule';\r\nimport licenceKeyError from '../helpers/licenceKeyError';\r\nimport { NeuralModelInitializer } from '../neural models/neuralModel';\r\nimport { loadWorker } from '../helpers/workers';\r\n\r\nexport default async ({ commonLicenseKey }): Promise<Array<NeuralModelInitializer> | undefined> => {\r\n  let result;\r\n  if (!commonLicenseKey) {\r\n    licenceKeyError();\r\n  } else {\r\n    const worker = await loadWorker(`${c.chunkPublicPath}mrzWorker.js`);\r\n    const mrzMod = new MRZModule(worker, commonLicenseKey, c.networkUrl);\r\n\r\n    moduleController.setModule('module', 'mrz', mrzMod);\r\n\r\n    result = [mrzMod.model.initialize.bind(mrzMod.model)];\r\n  }\r\n\r\n  return result;\r\n};\r\n"],"names":["type","getCrossOriginWorkerURL","originalWorkerUrl","_options","options","skipSameOrigin","useBlob","includes","window","location","origin","Promise","resolve","reject","fetch","then","res","text","codeString","workerPath","URL","href","split","pop","importScriptsFix","join","finalURL","encodeURIComponent","createObjectURL","Blob","catch","loadWorker","workerUrl","workerURL","Worker","exits","Tensor","NeuralModel","Provider","Normalization","normalize","ONE_LETTER_SIZE","HEIGHT","WIDTH","COLOR_COUNT","INPUT_TENSOR_DIMS","INPUT_TENSOR_NAME","OUTPUT_TENSOR_NAME","MrzModel","url","provider","WASM","wasmPaths","promiseList","predictionList","predict","rgb","inputTensor","feeds","session","run","predictFromArray","input","batchSize","buf","i","Array","fill","loading","STANDART","subarray","all","forEach","prediction","interpret","data","from","map","val","idx","value","confidence","sort","a","b","slice","reverse","isLoading","predictFromImage","dstCanvas","networkNames","c","MrzModule","worker","key","networkUrl","w","h","successCount","model","isInitialized","isProcessing","MIN_MRZ_FRAMES","neurons","mrz","postMessage","fn","initData","onmessage","name","getErrorVal","errorId","errorVal","licenseError","error","errorType","yComparator","point1","point2","y","allocate","prepareMRZlocation","locations","leftTop","rightTop","rightBottom","leftBottom","points","x","tl","bl","tr","br","factor","writeResults","mrzResults","mrzText","lines","fields","filter","field","indexOf","length","btoa","batchArr","result","scan","iData","predictions","processMRZ","r","rating","color","isTrusted","isValidRating","status","cancel","touch","image","isSuccessProcess","count","estimateResults","symbolsConf","coords","needToCut","results","reduce","sum","detectMrz","imageData","res1","prop","isNotMRZ","res2","console","log","mrzInfo","detectMRZ","push","JSON","parse","stringify","detectRes","moduleController","MRZModule","licenceKeyError","commonLicenseKey","mrzMod","chunkPublicPath","setModule","initialize","bind"],"sourceRoot":""}